steps:
  # Step 1: Checkout the source code using Cloud Build source
  - name: 'gcr.io/cloud-builders/git'
    args: ['clone', 'https://github.com/HarshJain975/hello-python-app.git']

  # Step 2: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/elite-flow-446700-k5/python-app:$SHORT_SHA'
      - './hello-python-app'

  # Step 3: Push the Docker image to Google Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/elite-flow-446700-k5/python-app:$SHORT_SHA'

  # Step 4: Authenticate kubectl with GKE cluster
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'config'
      - 'set'
      - 'project'
      - 'elite-flow-446700-k5'
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'container'
      - 'clusters'
      - 'get-credentials'
      - 'hello-python'  # Replace with your GKE cluster name
      - '--region'
      - 'us-central1'  # Replace with your GKE cluster's region

  # Step 5: Update the image in the deployment YAML file
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        sed -i "s|image:.*|image: gcr.io/elite-flow-446700-k5/python-app:$SHORT_SHA|g" hello-python-app/k8s/deployment.yaml

  # Step 6: Apply the updated YAML files
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'apply'
      - '-f'
      - 'hello-python-app/k8s/deployment.yaml'
      - '-f'
      - 'hello-python-app/k8s/service.yaml'

  # Step 7: Check rollout status to ensure the deployment is successful
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'rollout'
      - 'status'
      - 'deployment/python-app'
      - '--namespace=default'

images:
  - 'gcr.io/elite-flow-446700-k5/python-app:$SHORT_SHA'

options:
  logging: CLOUD_LOGGING_ONLY
